/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Prop.Presentacion;

import Prop.Dominio.DocumentKey;
import Prop.Dominio.conjDocumentos;
import java.util.*;
import javax.swing.DefaultListModel;
import java.awt.Desktop;  
import java.io.*;  
import java.nio.file.FileSystems;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Joan Sales de Marcos
 */
public class FrameInicial extends javax.swing.JFrame {
    
    int filtro = 3;
    String baseTitulo = "";
    String baseAutor = "";
    String baseContenido = "";
    String orden = "A - Z";
    /**
     * Creates new form FrameInicial
     */
    public FrameInicial() {
        initComponents();
    }
    
    public void hacerVisible() {
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        PopUpCrear = new javax.swing.JMenuItem();
        PopUpDuplicar = new javax.swing.JMenuItem();
        PopUpJosear = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        PopUpEliminar = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        ButtonGuardarSalir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaDocumentos = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        ModContenidoTxtArea = new javax.swing.JTextArea();
        LabelLista = new javax.swing.JLabel();
        LabelModContenido = new javax.swing.JLabel();
        LabelModTitulo = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        ModTituloTxtPane = new javax.swing.JTextPane();
        LabelModAutor = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        ModAutorTxtPane = new javax.swing.JTextPane();
        Orden = new javax.swing.JComboBox<>();
        ComboBoxFiltro = new javax.swing.JComboBox<>();
        LabelFiltrar = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ExprBooleanaTxtPane = new javax.swing.JTextPane();
        LabelCuantos = new javax.swing.JLabel();
        SpinnerCuantos = new javax.swing.JSpinner();
        LabelTitulo = new javax.swing.JLabel();
        LabelAutor = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        AutorTxtPane = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        TituloTxtPane = new javax.swing.JTextPane();
        ButtonModificar = new javax.swing.JButton();
        LabelExpr = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        ListaConsultas = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        menuJosearDocumento = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        ce = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        MenuListaAutores = new javax.swing.JMenuItem();
        MenuListaBool = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        MenuAyuda = new javax.swing.JMenuItem();

        PopUpCrear.setText("Crear Documento");
        PopUpCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUpCrearActionPerformed(evt);
            }
        });
        jPopupMenu1.add(PopUpCrear);

        PopUpDuplicar.setText("Duplicar Documento");
        PopUpDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUpDuplicarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(PopUpDuplicar);

        PopUpJosear.setText("Josear Documento");
        PopUpJosear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUpJosearActionPerformed(evt);
            }
        });
        jPopupMenu1.add(PopUpJosear);
        jPopupMenu1.add(jSeparator2);

        PopUpEliminar.setText("Eliminar Documento");
        PopUpEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUpEliminarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(PopUpEliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ButtonGuardarSalir.setBackground(new java.awt.Color(255, 102, 102));
        ButtonGuardarSalir.setForeground(new java.awt.Color(51, 51, 51));
        ButtonGuardarSalir.setText("Guardar y Salir");
        ButtonGuardarSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGuardarSalirActionPerformed(evt);
            }
        });

        ListaDocumentos.setComponentPopupMenu(jPopupMenu1);
        ListaDocumentos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ListaDocumentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaDocumentosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListaDocumentos);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        ModContenidoTxtArea.setColumns(20);
        ModContenidoTxtArea.setRows(5);
        jScrollPane2.setViewportView(ModContenidoTxtArea);

        LabelLista.setText("Lista de Documentos:");

        LabelModContenido.setText("Contenido:");

        LabelModTitulo.setText("TÃ­tulo:");

        jScrollPane6.setViewportView(ModTituloTxtPane);

        LabelModAutor.setText("Autor:");

        jScrollPane7.setViewportView(ModAutorTxtPane);

        Orden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A - Z", "Z - A" }));
        Orden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(Orden, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(LabelModContenido)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelModAutor)
                            .addComponent(LabelModTitulo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(jScrollPane7)))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(LabelLista)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelLista)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6)
                            .addComponent(LabelModTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane7)
                            .addComponent(LabelModAutor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LabelModContenido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Orden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        ComboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mostrar todo", "ExpresiÃ³n Booleana", "Parecido", "Autor" }));
        ComboBoxFiltro.setToolTipText("Filtrar por...");
        ComboBoxFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxFiltroItemStateChanged(evt);
            }
        });
        ComboBoxFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxFiltroActionPerformed(evt);
            }
        });

        LabelFiltrar.setText("Filtrar por:");

        ExprBooleanaTxtPane.setVisible(false);
        jScrollPane3.setViewportView(ExprBooleanaTxtPane);

        LabelCuantos.setText("CuÃ¡ntos:");
        LabelCuantos.setVisible(false);

        SpinnerCuantos.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        SpinnerCuantos.setVisible(false);
        SpinnerCuantos.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                SpinnerCuantosPropertyChange(evt);
            }
        });

        LabelTitulo.setText("TÃ­tulo:");
        LabelTitulo.setVisible(false);

        LabelAutor.setText("Autor:");
        LabelAutor.setVisible(false);

        AutorTxtPane.setVisible(false);
        jScrollPane4.setViewportView(AutorTxtPane);

        TituloTxtPane.setVisible(false);
        jScrollPane5.setViewportView(TituloTxtPane);

        ButtonModificar.setBackground(new java.awt.Color(102, 102, 255));
        ButtonModificar.setForeground(new java.awt.Color(51, 51, 51));
        ButtonModificar.setText("Modificar");
        ButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonModificarActionPerformed(evt);
            }
        });

        LabelExpr.setText("ExpresiÃ³n:");
        LabelExpr.setVisible(false);

        ListaConsultas.setVisible(false);
        jScrollPane8.setViewportView(ListaConsultas);

        jButton1.setText("Filtrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ButtonGuardarSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonModificar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(LabelTitulo)
                                                    .addComponent(LabelAutor)
                                                    .addComponent(LabelCuantos))
                                                .addGap(12, 12, 12)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                                    .addComponent(SpinnerCuantos)
                                                    .addComponent(jScrollPane4)))
                                            .addComponent(LabelExpr))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(LabelFiltrar))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(ComboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)))
                                .addGap(0, 29, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LabelFiltrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(15, 15, 15)
                        .addComponent(LabelExpr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelCuantos)
                            .addComponent(SpinnerCuantos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelTitulo)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelAutor)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonModificar)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ButtonGuardarSalir)
                        .addContainerGap())))
        );

        jMenu3.setText("Archivo");

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem13.setText("Guardar sesiÃ³n");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenu5.setText("Documentos...");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Crear Documento");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem6.setText("Borrar Docuento");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem9.setText("Duplicar Documento");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        menuJosearDocumento.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuJosearDocumento.setText("Josear Documento");
        menuJosearDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuJosearDocumentoActionPerformed(evt);
            }
        });
        jMenu5.add(menuJosearDocumento);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Importar Documentos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Exportar Documentos");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenu3.add(jMenu5);

        jMenu2.setText("Expresiones Booleanas...");

        ce.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        ce.setText("Crear ExpresiÃ³n Booleana");
        ce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ceActionPerformed(evt);
            }
        });
        jMenu2.add(ce);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem8.setText("Borrar ExpresiÃ³n Booleana");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beAction(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenu3.add(jMenu2);
        jMenu3.add(jSeparator1);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem11.setText("Guardar y Salir");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Ver");

        MenuListaAutores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuListaAutores.setText("Lista de Autores");
        MenuListaAutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuListaAutoresActionPerformed(evt);
            }
        });
        jMenu1.add(MenuListaAutores);

        MenuListaBool.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuListaBool.setText("Lista de Expresiones Booleanas");
        MenuListaBool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuListaBoolActionPerformed(evt);
            }
        });
        jMenu1.add(MenuListaBool);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Ayuda");

        MenuAyuda.setText("LÃ©ete el Manuel");
        MenuAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAyudaActionPerformed(evt);
            }
        });
        jMenu4.add(MenuAyuda);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonGuardarSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGuardarSalirActionPerformed
        //Guardar en sesion
        ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
        cp.guardarEnSession();
        
        //Salir
        System.exit(0);

    }//GEN-LAST:event_ButtonGuardarSalirActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ImportExportDocumento ied = new ImportExportDocumento();
        ied.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        ied.show();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void MenuListaBoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuListaBoolActionPerformed
        this.goToDeleteExpresion();
    }//GEN-LAST:event_MenuListaBoolActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        AccionDocumento ad = new AccionDocumento("Borrar");
        ad.show();
        ad.setDefaultCloseOperation(DISPOSE_ON_CLOSE);     
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void ButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonModificarActionPerformed
    
        if (baseTitulo.equals("")) {
            ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
            cp.error("Debes seleccionar algun documento para modificarlo");
        }
        else if (baseAutor.equals("")) {
            ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
            cp.error("Debes seleccionar algun documento para modificarlo");
        }
        else if (baseContenido.equals("")) {
            ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
            cp.error("Debes seleccionar algun documento para modificarlo");
        }
        else {
            String newTitulo = this.ModTituloTxtPane.getText();
            String newAutor = this.ModAutorTxtPane.getText();
            String newCont = this.ModContenidoTxtArea.getText();
            
            if (newTitulo.isBlank()) {
                ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                cp.error("Debes introducir un tÃ­tulo que no estÃ© vacÃ­o");
            }
            else if (newAutor.isBlank()) {
                ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                cp.error("Debes introducir un autor que no estÃ© vacÃ­o");
            }
            else if (newCont.isBlank()) {
                ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                cp.error("Debes introducir un contenido que no estÃ© vacÃ­o");
            }
            else {
                System.out.println(baseTitulo+"; "+newTitulo);
                System.out.println(baseAutor+"; "+newAutor);
                System.out.println(baseContenido+"; "+newCont);

                if (!baseTitulo.equals(newTitulo)) {
                    ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                    try {
                        DocumentKey oldDK = new DocumentKey(baseTitulo, baseAutor);
                        DocumentKey dk = new DocumentKey(newTitulo, baseAutor);
                        cp.modTitulo(dk, oldDK);
                    }
                    catch (Exception var22) {
                        cp.error(var22.getMessage());
                    }
                }
                if (!baseAutor.equals(newAutor)) {
                    ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                    try {
                        DocumentKey oldDK = new DocumentKey(newTitulo, baseAutor);
                        DocumentKey dk = new DocumentKey(newTitulo, newAutor);
                        cp.modAutor(dk, oldDK);
                    }
                    catch (Exception var22) {
                        cp.error(var22.getMessage());
                    }
                }
                if (!baseContenido.equals(newCont)) {
                    ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                    try {
                        DocumentKey dk = new DocumentKey(newTitulo, newAutor);
                        cp.modContenido(dk, newCont);
                    }
                    catch (Exception var22) {
                        cp.error(var22.getMessage());
                    }

                }
                baseTitulo = newTitulo;
                baseAutor = newAutor;
                baseContenido = newCont;
                this.updateData();
            }
        }
    }//GEN-LAST:event_ButtonModificarActionPerformed

    //Cambiar propiedades del frame segÃºn la consulta que se quiere hacer
    private void ComboBoxFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxFiltroItemStateChanged
        if (evt.getSource()==ComboBoxFiltro) {
            String selected = (String) ComboBoxFiltro.getSelectedItem();
            if (null != selected) switch (selected) {
                case "ExpresiÃ³n Booleana":
                    ExprBooleanaTxtPane.setVisible(true);
                    ListaConsultas.setVisible(true);
                    AutorTxtPane.setVisible(false);
                    TituloTxtPane.setVisible(false);
                    SpinnerCuantos.setVisible(false);
                    LabelExpr.setVisible(true);
                    LabelCuantos.setVisible(false);
                    LabelTitulo.setVisible(false);
                    LabelAutor.setVisible(false);
                    break;
                case "Parecido":
                    ExprBooleanaTxtPane.setVisible(false);
                    ListaConsultas.setVisible(false);
                    AutorTxtPane.setVisible(true);
                    TituloTxtPane.setVisible(true);
                    SpinnerCuantos.setVisible(true);
                    LabelExpr.setVisible(false);
                    LabelCuantos.setVisible(true);
                    LabelTitulo.setVisible(true);
                    LabelAutor.setVisible(true);
                    break;
                case "TÃ­tulo":
                    ExprBooleanaTxtPane.setVisible(false);
                    ListaConsultas.setVisible(false);
                    AutorTxtPane.setVisible(false);
                    TituloTxtPane.setVisible(true);
                    SpinnerCuantos.setVisible(false);
                    LabelExpr.setVisible(false);
                    LabelCuantos.setVisible(false);
                    LabelTitulo.setVisible(true);
                    LabelAutor.setVisible(false);
                    break;
                case "Autor":
                    ExprBooleanaTxtPane.setVisible(false);
                    ListaConsultas.setVisible(false);
                    AutorTxtPane.setVisible(true);
                    TituloTxtPane.setVisible(false);
                    SpinnerCuantos.setVisible(false);
                    LabelExpr.setVisible(false);
                    LabelCuantos.setVisible(false);
                    LabelTitulo.setVisible(false);
                    LabelAutor.setVisible(true);
                    break;
                case "Mostrar todo":
                    ExprBooleanaTxtPane.setVisible(false);
                    ListaConsultas.setVisible(false);
                    AutorTxtPane.setVisible(false);
                    TituloTxtPane.setVisible(false);
                    SpinnerCuantos.setVisible(false);
                    LabelExpr.setVisible(false);
                    LabelCuantos.setVisible(false);
                    LabelTitulo.setVisible(false);
                    LabelAutor.setVisible(false);
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_ComboBoxFiltroItemStateChanged

    private void ComboBoxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxFiltroActionPerformed
        String selected = String.valueOf(ComboBoxFiltro.getSelectedItem());
        switch (selected) {
            case "Parecido":
                filtro = 1;
                break;
            case "Autor":
                filtro = 2;
                break;
            case "ExpresiÃ³n Booleana":
                filtro = 0;
                break;
            case "Mostrar todo":
                filtro = 3;
                ControladorPresentacion cp = ControladorPresentacion.getInstance();
                try{
                    ArrayList<DocumentKey> docs = cp.getControladorDominio().listarDocumentos();
                    updateListaDocumentos(docs);
                }
                catch (Exception e) {
                    cp.error(e.getMessage());
                }
            default:
                break;
        }
    }//GEN-LAST:event_ComboBoxFiltroActionPerformed

    private void SpinnerCuantosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_SpinnerCuantosPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_SpinnerCuantosPropertyChange

    private void MenuAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAyudaActionPerformed
        String appWorkingDir = System.getProperty("user.dir");
        String stopWordsFileRelativePath = "/DOCS/Manuel.pdf";
        String fileSeparator = FileSystems.getDefault().getSeparator(); // esta lÃ­nea sirve para que el cÃ³digo funcione tanto en linux/mac como en Windows
        File f = new File(appWorkingDir + fileSeparator + stopWordsFileRelativePath);
        
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(f);
        } catch (IOException ex) {
            Logger.getLogger(FrameInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MenuAyudaActionPerformed

    private void PopUpDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUpDuplicarActionPerformed
        ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
        
        if (baseTitulo.equals("") || baseAutor.equals("")) {
            cp.error("Debes seleccionar algun documento para duplicarlo");
        }
        else {
            cp.duplicarDocumento(baseTitulo, baseAutor);
        }
        this.updateData();
    }//GEN-LAST:event_PopUpDuplicarActionPerformed

    private void PopUpJosearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUpJosearActionPerformed
        ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
        
        if (baseTitulo.equals("") || baseAutor.equals("")) {
            cp.error("Debes seleccionar algun documento para josarlo");
        }
        else {
            JosearDocumento frameJosear = new JosearDocumento(baseTitulo, baseAutor);
            frameJosear.show();
            frameJosear.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        }
        this.updateData();
    }//GEN-LAST:event_PopUpJosearActionPerformed

    private void PopUpEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUpEliminarActionPerformed
        //eliminar
        ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
        
        if (baseTitulo.equals("") || baseAutor.equals("")) {
            cp.error("Debes seleccionar algun documento para eliminarlo");
        }
        else {
            AccionDocumento ad = new AccionDocumento("Borrar", baseTitulo, baseAutor);
            ad.show();
            ad.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        }
        this.updateData(); 
    }//GEN-LAST:event_PopUpEliminarActionPerformed

    private void PopUpCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUpCrearActionPerformed
        CrearDocumento cd = new CrearDocumento();
        cd.show();
        cd.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setVisible(false);

    }//GEN-LAST:event_PopUpCrearActionPerformed

    private void MenuListaAutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuListaAutoresActionPerformed
        ListaAutores frameAutores = new ListaAutores();
        frameAutores.show();
        frameAutores.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_MenuListaAutoresActionPerformed

    private void ceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ceActionPerformed
        AccionExprBooleana aeb = new AccionExprBooleana("Crear");
        aeb.show();
        aeb.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_ceActionPerformed

    private void beAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beAction
        this.goToDeleteExpresion();
    }//GEN-LAST:event_beAction

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (filtro == 0) {
            String expresion = this.ExprBooleanaTxtPane.getText();
            if (expresion.isBlank()) {
                int idxSelected = this.ListaConsultas.getSelectedIndex();
                if (idxSelected == -1) {
                    ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                    cp.error("Debes seleccionar alguna expresiÃ³n para hacer una consulta");
                }
                else {
                    ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                    ArrayList<DocumentKey> resConsulta = cp.nuevaConsultaExpresion(idxSelected);
                    updateListaDocumentos(resConsulta);
                }
            }
            else {
                ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
                ArrayList<DocumentKey> resConsulta = cp.nuevaConsultaExpresion(expresion);
                updateListaDocumentos(resConsulta);
            }
        }
        else if (filtro == 1) {
            int cuantos = Integer.parseInt(this.SpinnerCuantos.getValue().toString());
            
            ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
            try {
                DocumentKey dk = new DocumentKey(this.TituloTxtPane.getText(), this.AutorTxtPane.getText());
                TreeMap<Double,DocumentKey> tm = cp.consultakDocumentosParecidos (dk, cuantos);
                System.out.println(tm);
                
                ArrayList<DocumentKey> resConsulta = new ArrayList<>();
                int count = 0;
                for (Double d : tm.keySet()) {
                        if (count >= cuantos) break;
                        resConsulta.add(tm.get(d));
                        ++count;
                    }
                updateListaDocumentos(resConsulta);
            }
            catch (Exception var22) {
                cp.error(var22.getMessage());
            }
            
                
        }
        
        else if (filtro == 2) {
            ControladorPresentacion cp = ControladorPresentacion.getInstance();
            String autor = AutorTxtPane.getText();
            try {
                if (!cp.getControladorDominio().getConjAutores().existsAutor(autor)) cp.error("Introduzca un autor vÃ¡lido");
                else {
                    
                    ArrayList<DocumentKey> resConsulta = new ArrayList<>();
                    ArrayList<String> titulos = cp.getControladorDominio().listarTitulos(autor);
                    for (String s: titulos) {
                            resConsulta.add(new DocumentKey(s, autor));
                    }
                    updateListaDocumentos(resConsulta);
                }
            }
            catch (Exception e) {
                cp.error(e.getMessage());
            }
            
        }
        else if (filtro == 3) {
            ControladorPresentacion cp = ControladorPresentacion.getInstance();
            try{
                ArrayList<DocumentKey> docs = cp.getControladorDominio().listarDocumentos();
                updateListaDocumentos(docs);
            }
            catch (Exception e) {
                cp.error(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void menuJosearDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuJosearDocumentoActionPerformed
        JosearDocumento frameJosear = new JosearDocumento();
        frameJosear.show();
        frameJosear.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_menuJosearDocumentoActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        CrearDocumento cd = new CrearDocumento();
        cd.show();
        cd.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void ListaDocumentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaDocumentosMouseClicked
        ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
        int index = ListaDocumentos.locationToIndex(evt.getPoint());
        if (index >= 0) {
            String o = ListaDocumentos.getModel().getElementAt(index);
            System.out.println("Double-clicked on: " + o.toString());

            String[] lista = o.split(" - ");
            String titulo = lista[0];
            String autor = lista[1];
            try {
                DocumentKey dk = new DocumentKey(titulo, autor);
                ArrayList<String> doc = cp.getContenidoDoc(dk);
                
                this.ModTituloTxtPane.setText(titulo);
                this.ModAutorTxtPane.setText(autor);
                String cont = "";
                for (String e:
                    doc) {
                    if (!e.equals("* ")) {
                        cont+= (e+"\n");
                    }        
               }
                this.ModContenidoTxtArea.setText(cont);
                
                baseTitulo = titulo;
                baseAutor = autor;
                baseContenido = cont;
            }
            catch (Exception var22) {
                cp.error(var22.getMessage());
            }
          
          System.out.println(lista);
        }
        //getContenidoDoc(DocumentKey dk)
        //ArrayList<DocumentKey> resConsulta = cp.nuevaConsultaExpresion(idxSelected);
    }//GEN-LAST:event_ListaDocumentosMouseClicked

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        AccionDocumento ad = new AccionDocumento("Duplicar");
        ad.show();
        ad.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        //Guardar en sesion
        ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
        cp.guardarEnSession();
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        //Guardar en sesion
        ControladorPresentacion cp = (new ControladorPresentacion()).getInstance();
        cp.guardarEnSession();
        //Salir
        System.exit(0);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void OrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenActionPerformed
        ArrayList<String> lista = new ArrayList<>();
        for (int i = 0; i < ListaDocumentos.getModel().getSize(); i++) {
            lista.add(ListaDocumentos.getModel().getElementAt(i));
        }
        
        System.out.println("---------------");
        System.out.println(lista);
        
        int i;
        int n = lista.size();
        String t;
        
        String selected = String.valueOf(Orden.getSelectedItem());
        
        //Si se elige Z - A
        if ("Z - A".equals(selected)){
            if ("A - Z".equals(this.orden)) {
                for (i = 0; i < n / 2; i++) {
                    t = lista.get(i);
                    lista.set(i, lista.get(n - i - 1));
                    lista.set(n - i - 1, t);
                }
                System.out.println(lista);
            }
            this.orden = "Z - A";
        }
        
        //Si se elige A - Z
        else if ("A - Z".equals(selected)){
            if ("Z - A".equals(this.orden)) {
                for (i = 0; i < n / 2; i++) {
                    t = lista.get(i);
                    lista.set(i, lista.get(n - i - 1));
                    lista.set(n - i - 1, t);
                }
                System.out.println(lista);
            }
            this.orden = "A - Z";
        }
        
        //Escribir lista de nuevo
        DefaultListModel modelo = new DefaultListModel();
        for (String s:
             lista) {
             modelo.addElement(s);
        }
        this.ListaConsultas.setModel(modelo);
    }//GEN-LAST:event_OrdenActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        ExportarDocumento ed = new ExportarDocumento();
        ed.show();
        ed.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameInicial().setVisible(true);
            }
        });
    }
    
    public void updateData() {
        DefaultListModel modelo = new DefaultListModel();
        
        ControladorPresentacion cp = ControladorPresentacion.getInstance();
        ArrayList<String> le = cp.getListaExpresiones();
        for (String e:
             le) {
             modelo.addElement(e);
        }
        this.ListaConsultas.setModel(modelo);
        
        conjDocumentos cd = cp.getAllDocs();
        
        this.updateListaDocumentos(cd.getListaDKS());
        
        String baseTitulo = this.ModTituloTxtPane.getText();
        String baseAutor = this.ModAutorTxtPane.getText();
        String baseContenido = this.ModContenidoTxtArea.getText();
    }
    
    public void updateListaDocumentos(ArrayList<DocumentKey> resConsulta) {
        DefaultListModel modelo = new DefaultListModel();
        for (DocumentKey e:
             resConsulta) {
             modelo.addElement(e.getTitulo()+" - "+e.getAutor());
        }
        this.ListaDocumentos.setModel(modelo);
        
    }
    
    public void goToDeleteExpresion() {
        ListaConsultas lc = new ListaConsultas();
        lc.setVisible(true);
        lc.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane AutorTxtPane;
    private javax.swing.JButton ButtonGuardarSalir;
    private javax.swing.JButton ButtonModificar;
    private javax.swing.JComboBox<String> ComboBoxFiltro;
    private javax.swing.JTextPane ExprBooleanaTxtPane;
    private javax.swing.JLabel LabelAutor;
    private javax.swing.JLabel LabelCuantos;
    private javax.swing.JLabel LabelExpr;
    private javax.swing.JLabel LabelFiltrar;
    private javax.swing.JLabel LabelLista;
    private javax.swing.JLabel LabelModAutor;
    private javax.swing.JLabel LabelModContenido;
    private javax.swing.JLabel LabelModTitulo;
    private javax.swing.JLabel LabelTitulo;
    private javax.swing.JList<String> ListaConsultas;
    private javax.swing.JList<String> ListaDocumentos;
    private javax.swing.JMenuItem MenuAyuda;
    private javax.swing.JMenuItem MenuListaAutores;
    private javax.swing.JMenuItem MenuListaBool;
    private javax.swing.JTextPane ModAutorTxtPane;
    private javax.swing.JTextArea ModContenidoTxtArea;
    private javax.swing.JTextPane ModTituloTxtPane;
    private javax.swing.JComboBox<String> Orden;
    private javax.swing.JMenuItem PopUpCrear;
    private javax.swing.JMenuItem PopUpDuplicar;
    private javax.swing.JMenuItem PopUpEliminar;
    private javax.swing.JMenuItem PopUpJosear;
    private javax.swing.JSpinner SpinnerCuantos;
    private javax.swing.JTextPane TituloTxtPane;
    private javax.swing.JMenuItem ce;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem menuJosearDocumento;
    // End of variables declaration//GEN-END:variables
}
